"""
Schema for ReferralCreditNetwork subgraph
Tracks users, referral relationships, and credit events in the referral network
"""

type User @entity {
  id: ID! # web3Id as string
  web3Id: Bytes! # Original bytes32 web3Id
  walletAddress: Bytes!
  onChainScore: BigInt!
  referralScore: BigInt!
  referredBy: User # Reference to referring user
  isRegistered: Boolean!
  registeredAt: BigInt!
  
  # Relationships
  referrals: [User!]! @derivedFrom(field: "referredBy") # Users this user has referred
  creditEvents: [CreditEvent!]! @derivedFrom(field: "user") # Credit events for this user
  receivedRewards: [ReferralReward!]! @derivedFrom(field: "referrer") # Rewards received as referrer
  
  # Computed fields
  totalReferrals: Int! # Total number of direct referrals
  networkDepth: Int! # Depth in referral network (0 = root user)
  totalRewardsEarned: BigInt! # Total referral rewards earned
  averageCreditScore: BigDecimal! # Average of onChain + referral scores
}

type ReferralRelationship @entity {
  id: ID! # referrer-web3Id + "-" + referee-web3Id
  referrer: User!
  referee: User!
  createdAt: BigInt!
  depth: Int! # How many levels deep this relationship is
  isActive: Boolean! # Whether this referral relationship is still active
}

type CreditEvent @entity {
  id: ID! # eventId as string
  eventId: BigInt!
  user: User!
  scoreChange: BigInt! # Can be negative
  timestamp: BigInt!
  eventType: String! # "LOAN_PAID", "LOAN_DEFAULT", "GOOD_BEHAVIOR", "BAD_BEHAVIOR"
  description: String!
  
  # Relationships
  generatedRewards: [ReferralReward!]! @derivedFrom(field: "originEvent") # Rewards generated by this event
}

type ReferralReward @entity {
  id: ID! # eventId + "-" + referrer-web3Id + "-" + depth
  referrer: User!
  originUser: User! # The user whose action generated this reward
  originEvent: CreditEvent!
  reward: BigInt! # Amount of reward (always positive, but can represent penalty)
  isPenalty: Boolean! # Whether this was a penalty (negative reward)
  depth: Int! # How many levels up the referral chain
  timestamp: BigInt!
  
  # Computed
  effectiveReward: BigInt! # reward * (isPenalty ? -1 : 1)
}

type ReferralPath @entity {
  id: ID! # user-web3Id
  user: User!
  path: [Bytes!]! # Array of web3Ids from user to root
  depth: Int!
  updatedAt: BigInt!
}

type NetworkStats @entity {
  id: ID! # Always "network-stats"
  totalUsers: BigInt!
  totalReferralRelationships: BigInt!
  totalCreditEvents: BigInt!
  totalRewardsDistributed: BigInt!
  averageNetworkDepth: BigDecimal!
  lastUpdated: BigInt!
}

type DailyStats @entity {
  id: ID! # date as YYYY-MM-DD
  date: String!
  newUsers: BigInt!
  newReferrals: BigInt!
  creditEvents: BigInt!
  rewardsDistributed: BigInt!
  averageScoreChange: BigDecimal!
}

# Aggregated metrics for analytics
type UserMetrics @entity {
  id: ID! # user-web3Id
  user: User!
  
  # Referral metrics
  directReferrals: Int!
  indirectReferrals: Int! # Total network size below this user
  maxDepthBelow: Int! # Maximum depth of referral tree below this user
  
  # Score metrics
  totalScoreChanges: BigInt!
  positiveEvents: Int!
  negativeEvents: Int!
  averageScoreChange: BigDecimal!
  
  # Reward metrics
  totalRewardsEarned: BigInt!
  totalPenaltiesReceived: BigInt!
  netRewardEarnings: BigInt!
  
  # Time-based metrics
  lastActivityAt: BigInt!
  daysSinceRegistration: Int!
  
  # Rankings
  referralRank: Int! # Rank by number of referrals
  scoreRank: Int! # Rank by total score
  rewardRank: Int! # Rank by rewards earned
}

# For tracking referral codes and invitations
type ReferralCode @entity {
  id: ID! # The referral code string
  code: String!
  owner: User!
  uses: BigInt!
  maxUses: BigInt! # 0 = unlimited
  isActive: Boolean!
  createdAt: BigInt!
  expiresAt: BigInt! # 0 = no expiration
}
